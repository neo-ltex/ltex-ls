import { existsSync, renameSync, rmdirSync } from 'node:fs'
import { join } from 'node:path'
import { ctx } from './ctx.js'
import type { Architecture, Platform } from './types.js'
import { downloadAsset } from './download_asset.js'
import { execa } from 'execa'

const JAVA_VERSION = '11.0.12+7'

export async function setupJava(platform: Platform, arch: Architecture) {
	const cwd = (await prepareJava(ctx.getCurrentPlatform(), arch)).dir
	const { dir } = await prepareJava(platform, arch)

	return {
		dir,
		async createDistribution(outPath: string) {
			// List generated by downloading last AdoptOpenJDK JRE and running "bin/java --list-modules".
			// "java.se" doesn't suffice as this causes LTeX LS to crash when started by VS Code
			// ("Unable to invoke no-args constructor for class org.eclipse.lsp4j.SemanticTokensCapabilities.
			// Registering an InstanceCreator with Gson for this type may fix this problem.").
			const javaModules = [
				'java.base',
				'java.compiler',
				'java.datatransfer',
				'java.desktop',
				'java.instrument',
				'java.logging',
				'java.management',
				'java.management.rmi',
				'java.naming',
				'java.net.http',
				'java.prefs',
				'java.rmi',
				'java.scripting',
				'java.se',
				'java.security.jgss',
				'java.security.sasl',
				'java.smartcardio',
				'java.sql',
				'java.sql.rowset',
				'java.transaction.xa',
				'java.xml',
				'java.xml.crypto',
				'jdk.accessibility',
				'jdk.aot',
				'jdk.charsets',
				'jdk.crypto.cryptoki',
				'jdk.crypto.ec',
				'jdk.dynalink',
				'jdk.httpserver',
				'jdk.internal.ed',
				'jdk.internal.le',
				'jdk.internal.vm.ci',
				'jdk.internal.vm.compiler',
				'jdk.internal.vm.compiler.management',
				'jdk.jdwp.agent',
				'jdk.jfr',
				'jdk.jsobject',
				'jdk.localedata',
				'jdk.management',
				'jdk.management.agent',
				'jdk.management.jfr',
				'jdk.naming.dns',
				'jdk.naming.ldap',
				'jdk.naming.rmi',
				'jdk.net',
				'jdk.pack',
				'jdk.scripting.nashorn',
				'jdk.scripting.nashorn.shell',
				'jdk.sctp',
				'jdk.security.auth',
				'jdk.security.jgss',
				'jdk.unsupported',
				'jdk.xml.dom',
				'jdk.zipfs'
			]
			const jmodsDirPath = platform === 'mac' ? join(dir, 'Contents', 'Home', 'jmods') : join(dir, 'jmods')
			console.info('Creating new Java distribution...')
			await execa(join(cwd, 'bin', 'jlink'), [
				'--module-path',
				jmodsDirPath,
				'--add-modules',
				javaModules.join(','),
				'--strip-debug',
				'--no-man-pages',
				'--no-header-files',
				'--compress=2',
				'--output',
				outPath
			])
		}
	}
}

async function prepareJava(platform: Platform, arch: Architecture) {
	const cacheDir = ctx.getCacheDir()
	const archiveName = getJavaArchiveName(platform, arch)
	const archiveFilePath = join(cacheDir, archiveName)
	if (!existsSync(archiveFilePath)) {
		console.info(`Cannot find java archive at '${archiveFilePath}' in cache folder, downloading...`)
		const javaUrl = getJavaUrl(archiveName)
		await downloadAsset(javaUrl, archiveFilePath)
	}
	const dir = join(cacheDir, `java-${JAVA_VERSION.replace('+', '_')}-${platform}-${arch}`)
	const jdkDirname = `jdk-${JAVA_VERSION}`
	if (!existsSync(dir)) {
		console.info(`Extracting java to ${dir}...`)
		platform === 'windows'
			? await ctx.unzip(archiveFilePath, `${dir}-tmp`)
			: await ctx.extractTar(archiveFilePath, `${dir}-tmp`)
		renameSync(join(`${dir}-tmp`, jdkDirname), dir)
		rmdirSync(`${dir}-tmp`)
	}

	return { dir }
}

function getJavaUrl(archiveName: string) {
	return `https://github.com/adoptium/temurin11-binaries/releases/download/jdk-${quotePlus(
		JAVA_VERSION
	)}/${archiveName}`
}
function getJavaArchiveName(platform: Platform, arch: Architecture) {
	return `OpenJDK11U-jdk_${arch}_${platform}_hotspot_${JAVA_VERSION.replace('+', '_')}${
		platform === 'windows' ? '.zip' : '.tar.gz'
	}`
}

/**
 * Perform the same function as `urllib.parse.quote_plus` in Python.
 */
function quotePlus(input: string) {
	return encodeURIComponent(input).replace(/%20/g, '+')
}
